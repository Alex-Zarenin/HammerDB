#!/bin/sh
#########################################################################
## \
export LD_LIBRARY_PATH="./lib:$LD_LIBRARY_PATH"
## \
export PATH="./bin:$PATH"
## \
export PYTHONPATH="./lib/tclpy0.4:$PYTHONPATH"
## \
exec ./bin/tclsh8.6 "$0" ${1+"$@"}
########################################################################
# HammerDB
# Copyright (C) 2003-2022 Steve Shaw
# Author contact information at: http://www.hammerdb.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; If not, see <https://www.gnu.org/licenses/>
########################################################################
global hdb_version
set hdb_version "v4.6"
puts "HammerDB CLI $hdb_version"
puts "Copyright (C) 2003-2022 Steve Shaw"
if { $argc eq 0 } {
	set argv0 "" } else { set argv0 [ string tolower [lindex $argv 0 ]] }
if { $argv0 == "" || $argv0 == "tcl" || $argv0 == "auto" } {
	set lang "tcl"
	set extension ".tcl"
	puts "Type \"help\" for a list of commands"
	} elseif { $argv0 == "py" || $argv0 == "python" } {
	set lang "python"
	set extension ".py"
	puts "Type \"help()\" for a list of commands"
	} else {
	puts {Usage: hammerdbcli [ tcl|python [ auto [ script_to_autoload.[ tcl|py ] ] ] ]}
	exit
	}

namespace eval autostart {
    set autostartap "false"
	if { $argv0 == "tcl" || $argv0 == "py" || $argv0 == "python" } {
	set argv [ lreplace $argv 0 0 ]
	set argc [ expr {$argc - 1} ]
		}
    if { $argc eq 0 } { ; } else {
    if {$argc != 2 || [lindex $argv 0] != "auto" } {
	puts {Usage: hammerdbcli [ tcl|python [ auto [ script_to_autoload.[ tcl|py ] ] ] ]}
	exit
	} else {
        set autostartap "true"
        set autoloadscript [lindex $argv 1]
if { [ file exists $autoloadscript ] && [ file isfile $autoloadscript ] && [ file extension $autoloadscript ] eq $extension } {
;# autostart selected and tcl or py file exists
	     } else {
if { [ file exists $autoloadscript ] && [ file isfile $autoloadscript ] && [ file extension $autoloadscript ] != $extension } {
	puts "Error: incorrect file extension for $lang" 
	if { $lang eq "tcl" } {
	puts {Usage: hammerdbcli [ tcl [ auto [ script_to_autoload.[ tcl ] ] ]}
		} else {
	puts {Usage: hammerdbcli [ python [ auto [ script_to_autoload.[ py ] ] ]}
		       }
	exit
		 } else {
	puts {Usage: hammerdbcli [ tcl|python [ auto [ script_to_autoload.[ tcl|py ] ] ] ]}
	 	}
	     }
         }
    }
}
#Common CLI initialisation between Tcl and Python
set cli_common_init {set UserDefaultDir [ file dirname [ info script ] ]
::tcl::tm::path add "$UserDefaultDir/modules"
append modulelist { Thread msgcat xml comm tclreadline task reformat_tcl }
for { set modcount 0 } { $modcount < [llength $modulelist] } { incr modcount } {
    set m [lindex $modulelist $modcount]
		set loadtext $m
	if [catch { package require $m }] {
                puts stderr "While loading module\
                        \"$m\"...\n$errorInfo"
                exit 1
        }
    }
    
append loadlist { genvu.tcl gentpcc.tcl gentpch.tcl gengen.tcl genxml.tcl genmodes.tcl gentccmn.tcl gentccli.tcl geninitcli.tcl gencli.tcl genhelp.tcl genstep.tcl }
for { set loadcount 0 } { $loadcount < [llength $loadlist] } { incr loadcount } {
    set f [lindex $loadlist $loadcount]
		set loadtext $f
	if [catch {source [ file join $UserDefaultDir src generic $f ]}] {
                puts stderr "While loading component file\
                        \"$f\"...\n$errorInfo"
                exit 1
        }
    }

for { set dbsrccount 0 } { $dbsrccount < [llength $dbsrclist] } { incr dbsrccount } {
    set f [lindex $dbsrclist $dbsrccount]
		set loadtext $f
	if [catch {source [ file join $UserDefaultDir src $f ]}] {
                puts stderr "Error:loading database source files/$f"
        }
    }}
#In Tcl only either source file or do tclreadline::interact
set cli_tcl_append {
if { $autostart::autostartap == "true" } {
        source $autostart::autoloadscript
        } else {
    TclReadLine::interact
        }}
#In Python already in interact so bypas tclreadline
set cli_py_append {
rename putscli _putscli
proc putscli { output } {
puts "$output\r"
	}}
#Initialise CLI in Tcl
if { $lang == "tcl" } {
append cli_common_init $cli_tcl_append
eval $cli_common_init
#Initialise CLI in Python
} elseif { $lang eq "python" } {
proc pythonVersion {{pythonExecutable "python3"}} {
puts "did py version"
if {![catch {exec $pythonExecutable --version}] || [lindex $::errorCode 0] eq "NONE"} {
} else {
puts "Error:failed to find executable $pythonExecutable"
exit
}
set info [exec $pythonExecutable --version 2>@1]
if {[regexp {^Python ([\d.]+)$} $info --> version]} {
return $version
}
puts "Error:failed to parse output of $pythonExecutable --version: '$info'"
exit
}
set syspath [ string trim $env(PYTHONPATH) ":*" ]
if { ![ file isdirectory $syspath ] } {
puts "Error:Cannot find HammerDB Python libraries $env(PYTHONPATH) is not a directory"
exit
	}
if {[string match windows $::tcl_platform(platform)]} {
#Windows
        package require twapi
        package require twapi_input
} else {
#Linux
if {[catch {package require Expect} ]} { 
puts "Error:Failed to load Expect package to run Python" 
exit
} 
#Check python library versions are compatible
if {[catch {package require tclpy} message]} { 
regexp {libpython([0-9]+.[0-9]+).so} $message matched pyver 
if { [ info exists pyver ] && $pyver != [pythonVersion] } {
puts "Error: Python version $pyver required, version [pythonVersion] is installed" 
exit
	} else {
puts "Error: Unable to detect Python installation" 
exit
	}
	} else {
catch {package forget tclpy}
	}
#Remove tclreadline module from common initialisation in Python
regsub -all -line {tclreadline} $cli_common_init {} cli_common_init
append cli_common_init $cli_py_append
set timeout 10
log_user 0
spawn -noecho python3
expect ">>>"
send "import sys\x0D"
expect ">>>"
send "sys.path.append('$syspath')\x0D"
expect ">>>"
send "import tclpy\x0D"
expect ">>>"
send "tclpy.eval('global hdb_version')\x0D"
expect ">>>"
send "tclpy.eval('set hdb_version $hdb_version')\x0D"
expect ">>>"
send "init_tcl = (r'''\n$cli_common_init\n''')\x0D"
expect ">>>"
send "tclpy.eval(init_tcl)\x0D"
expect ">>>"
send "from hammerdb import *\x0D"
expect ">>>"
if { $autostart::autostartap == "true" } { send "runscript(1)\x0D" } else { send "runscript(0)\x0D" }
send "sys.stdout.flush()\x0D"
send "sys.ps1 = 'hammerdb>>>'\x0D"
#If timeout is set to a +ve value auto scripts will terminate before completion
set timeout -1
if { $autostart::autostartap == "true" } {
#run python script
expect "hammerdb>>>"
send "exec(open('$autostart::autoloadscript').read())"
send "\n"
log_user 1
expect {"hammerdb>>>"}
	} else {
expect "hammerdb>>>"
log_user 1
#-----------------------------#
#run interactive python shell
#-----------------------------#
interact {
 	\x03 {
	puts "^C"
	#send Ctrl-C to Python
	send "\x03"
	return
    	}
 	\x04 {
	puts "^D"
	#send Ctrl-D to Python
	send "\x04"
	return
    	}
	}
	}
exit
	}
}
